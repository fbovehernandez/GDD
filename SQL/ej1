Use GD2015C1

/* 8. Mostrar para el o los artículos que tengan stock en todos los depósitos, nombre del
artículo, stock del depósito que más stock tiene. */

SELECT prod_detalle, max(stoc_deposito) from STOCK JOIN Producto on prod_codigo = stoc_producto
where stoc_cantidad > 0
group by stoc_producto 
having count(distinct stoc_deposito) >= (Select count(*) from DEPOSITO)


/* 9. Mostrar el código del jefe, código del empleado que lo tiene como jefe, nombre del
mismo y la cantidad de depósitos que ambos tienen asignados. */

Select empl_codigo, empl_nombre, empl_jefe, (Select isnull(count(depo_encargado),0) as cant_depo1 from DEPOSITO 
												where depo_encargado = empl_codigo
												group by depo_encargado), (Select isnull(count(depo_encargado),0) from DEPOSITO 
												where depo_encargado = empl_jefe
												group by depo_encargado)
from Empleado
where empl_jefe is not null -- Asi no me trae al final boss (el jefe de jefes,a ese no lo quiero)

-- Joineando 

select ep.empl_codigo, ep.empl_nombre, ep.empl_jefe, count(distinct d1.depo_codigo), count(distinct d2.depo_codigo)
from empleado ep
LEFT JOIN DEPOSITO d1 on ep.empl_codigo = d1.depo_encargado
JOIN DEPOSITO d2 on ep.empl_jefe = d2.depo_encargado
group by ep.empl_codigo, ep.empl_nombre, ep.empl_jefe

/* 10. Mostrar los 10 productos más vendidos en la historia y también los 10 productos menos
vendidos en la historia. Además mostrar de esos productos, quien fue el cliente que
mayor compra realizo. */

Select distinct m.item_producto, (select top 1 fact_cliente from Item_Factura f
	JOIN factura on fact_tipo+fact_sucursal+fact_numero = item_tipo+item_sucursal+item_numero
				where m.item_producto = f.item_producto
				group by fact_cliente
				order by sum(item_cantidad) desc) from Item_Factura m
where item_producto IN ((select top 10 item_producto from Item_Factura
								group by item_producto
								order by sum(item_cantidad) desc)) 
   OR item_producto IN (select top 10 item_producto from Item_Factura
								group by item_producto
								order by sum(item_cantidad) asc)
							
/* 11. Realizar una consulta que retorne el detalle de la familia, la cantidad diferentes de
productos vendidos y el monto de dichas ventas sin impuestos. Los datos se deberán
ordenar de mayor a menor, por la familia que más productos diferentes vendidos tenga,
solo se deberán mostrar las familias que tengan una venta superior a 20000 pesos para
el año 2012.*/

select fami_detalle, count(distinct item_producto) as ProductosDistintos, sum(item_cantidad * item_precio) as VentasXFamilia from familia 
join producto on prod_familia = fami_id 
join item_factura on prod_codigo = item_producto
where fami_id IN (select prod_familia from Producto join Item_Factura on prod_codigo = item_producto
							join Factura on fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
								where year(fact_fecha) = 2012
								group by prod_familia
								having sum(item_cantidad*item_precio) > 20000)
group by fami_detalle
order by count(distinct item_producto)

/* 12. Mostrar nombre de producto, cantidad de clientes distintos que lo compraron importe
promedio pagado por el producto, cantidad de depósitos en los cuales hay stock del
producto y stock actual del producto en todos los depósitos. Se deberán mostrar
aquellos productos que hayan tenido operaciones en el año 2012 y los datos deberán
ordenarse de mayor a menor por monto vendido del producto. */

select prod_codigo, prod_detalle, count(distinct fact_cliente), avg(item_precio), (select count(stoc_deposito) from STOCK 
															where prod_codigo = stoc_producto
															and stoc_cantidad > 0), (select sum(stoc_cantidad) from STOCK
																		where stoc_producto = prod_codigo)
from Producto 
JOIN Item_Factura on prod_codigo = item_producto 
JOIN factura on fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
where prod_codigo IN (select distinct item_producto from item_Factura 
			JOIN factura on fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
							where year(fact_fecha) = 2012)	
group by prod_codigo, prod_detalle
order by sum(item_cantidad * item_precio) desc

select * from STOCK where stoc_producto = '00009660'

/* 13. Realizar una consulta que retorne para cada producto que posea composición nombre
del producto, precio del producto, precio de la sumatoria de los precios por la cantidad
de los productos que lo componen. Solo se deberán mostrar los productos que estén
compuestos por más de 2 productos y deben ser ordenados de mayor a menor por
cantidad de productos que lo componen. */

select p1.prod_codigo, p1.prod_precio, sum(comp_cantidad * p2.prod_precio) as SumaCantidadXProducto from Producto p1 
JOIN Composicion on prod_codigo = comp_producto
JOIN Producto p2 on p2.prod_codigo = comp_componente
group by p1.prod_codigo, p1.prod_precio
having count(p1.prod_codigo) = 2 -- > 2
order by count(p1.prod_codigo) desc

-- !
select * from Producto p1 
JOIN Composicion on prod_codigo = comp_producto
JOIN Producto p2 on p2.prod_codigo = comp_componente

/* 16. Con el fin de lanzar una nueva campaña comercial para los clientes que menos compran
en la empresa, se pide una consulta SQL que retorne aquellos clientes cuyas ventas son
inferiores a 1/3 del promedio de ventas del producto que más se vendió en el 2012.
Además mostrar
1. Nombre del Cliente
2. Cantidad de unidades totales vendidas en el 2012 para ese cliente.
3. Código de producto que mayor venta tuvo en el 2012 (en caso de existir más de 1,
mostrar solamente el de menor código) para ese cliente. */

-- Bueno, yo creo que asi esta bien, pero viendo otras soluciones se puede directamente JOINEAR directo con el main para
-- la segunda query (la de la cantidad totales de unidades vendidas) y agregar el where de la fecha mas abajo, 
-- no se cambiaria, pero son 2 opciones distintas, la mia creo que esta mal..

select f1.fact_cliente, (select sum(i2.item_cantidad) from Item_Factura i2 JOIN Factura f2 on
			f2.fact_tipo+f2.fact_numero+f2.fact_sucursal=i2.item_tipo+i2.item_numero+i2.item_sucursal
			where f2.fact_cliente = f1.fact_cliente and year(fact_fecha) = 2012 
			group by f2.fact_cliente), 
									(select top 1 i3.item_producto from Item_Factura i3 JOIN Factura f3
									on f3.fact_tipo+f3.fact_numero+f3.fact_sucursal=i3.item_tipo+i3.item_numero+i3.item_sucursal
									where f1.fact_cliente = f3.fact_cliente
									group by i3.item_producto 
									order by sum(item_cantidad*item_precio))
from Factura f1
group by f1.fact_cliente
having sum(f1.fact_total-f1.fact_total_impuestos) < 0.33*(select top 1 avg(item_precio * item_cantidad) from Item_Factura
	JOIN factura on fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
								where year(fact_fecha) = 2012
								group by item_producto
								order by sum(item_cantidad) desc)


select fact_cliente, fact_total, sum(item_cantidad*item_precio) from factura join Item_Factura on 
fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
group by fact_cliente, fact_total

select * from Factura join item_factura on
fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
where fact_cliente = '01541' 

USE GD2015C1
/* 17. Escriba una consulta que retorne una estadística de ventas por año y mes para cada producto.
La consulta debe retornar:
PERIODO: Año y mes de la estadística con el formato YYYYMM
PROD: Código de producto
DETALLE: Detalle del producto
CANTIDAD_VENDIDA= Cantidad vendida del producto en el periodo
VENTAS_AÑO_ANT= Cantidad vendida del producto en el mismo mes del periodo
pero del año anterior
CANT_FACTURAS= Cantidad de facturas en las que se vendió el producto en el
periodo
La consulta no puede mostrar NULL en ninguna de sus columnas y debe estar ordenada
por periodo y código de producto. */

-- FORMAT(fact_fecha, 'yyyy-MM')
select prod_codigo, prod_detalle, year(fact_fecha) as Anio, month(fact_fecha) as Mes, sum(item_cantidad) TotalSameYear, 
		count(distinct fact_tipo+fact_numero+fact_sucursal),
		isnull(
		(select sum(i1.item_cantidad) from Item_Factura i1
			JOIN factura f1 on f1.fact_tipo+f1.fact_numero+f1.fact_sucursal = i1.item_tipo+i1.item_numero+i1.item_sucursal
			where i1.item_producto = prod_codigo 
				and year(f1.fact_fecha) = year(fact_fecha)-1 and month(fact_fecha) = month(f1.fact_fecha)
			group by i1.item_producto, year(f1.fact_fecha), month(f1.fact_fecha)),0) as TotalPreviousYear
from producto 
JOIN item_factura on prod_codigo = item_producto 
JOIN factura on fact_tipo+fact_numero+fact_sucursal = item_tipo+item_numero+item_sucursal
group by prod_codigo, prod_detalle, year(fact_fecha), month(fact_fecha)
order by prod_codigo

select * from Factura where fact_numero = '00098971'

/* 18. Escriba una consulta que retorne una estadística de ventas para todos los rubros.
La consulta debe retornar:
DETALLE_RUBRO: Detalle del rubro
VENTAS: Suma de las ventas en pesos de productos vendidos de dicho rubro
PROD1: Código del producto más vendido de dicho rubro
PROD2: Código del segundo producto más vendido de dicho rubro
CLIENTE: Código del cliente que compro más productos del rubro en los últimos 30
días */

select rubr_id, rubr_detalle, sum(item_cantidad * item_precio) as VentasXRubro,
				(select top 1 item_producto from Item_Factura 
					JOIN Producto on prod_codigo = item_producto 
					where rubr_id = prod_rubro
					group by item_producto, prod_rubro -- No hace falta ya que al filtrar arriba solo me quedo con los productos de ese rubro
					order by sum(item_cantidad) desc), -- Para el top 2 es idem esto
				(select top 1 fact_cliente from Factura 
					JOIN item_factura i1 on fact_tipo+fact_numero+fact_sucursal = i1.item_tipo+i1.item_numero+i1.item_sucursal
					JOIN Producto on prod_codigo = item_producto
					where rubr_id = prod_rubro and fact_fecha >= DATEADD(day, -30, GETDATE())
					group by fact_cliente, prod_rubro -- Aca pasa lo mismo que arriba
					order by sum(item_cantidad) desc)
from Rubro JOIN Producto ON prod_rubro = rubr_id
JOIN item_factura ON item_producto = prod_codigo
group by rubr_id, rubr_detalle

select * from Producto join Familia on fami_id = prod_familia
order by prod_codigo, prod_familia

/* 19. En virtud de una recategorizacion de productos referida a la familia de los mismos se
solicita que desarrolle una consulta sql que retorne para todos los productos:
 Codigo de producto
 Detalle del producto
 Codigo de la familia del producto
 Detalle de la familia actual del producto
 Codigo de la familia sugerido para el producto
 Detalla de la familia sugerido para el producto
La familia sugerida para un producto es la que poseen la mayoria de los productos cuyo
detalle coinciden en los primeros 5 caracteres.
En caso que 2 o mas familias pudieran ser sugeridas se debera seleccionar la de menor
codigo. Solo se deben mostrar los productos para los cuales la familia actual sea
diferente a la sugerida
Los resultados deben ser ordenados por detalle de producto de manera ascendente */

select prod_codigo, prod_detalle, fami_id, fami_detalle, (select top 1 p2.prod_familia from Producto p2
					where LEFT(p2.prod_codigo, 5) = LEFT(Producto.prod_codigo, 5)
					group by p2.prod_familia
					order by count(p2.prod_familia), p2.prod_familia), (select fami_detalle from familia f2
																where f2.fami_id = /*subquery anterior*/2)
from Producto JOIN Familia on fami_id = prod_familia 
-- where fami_id != misma subquery de arriba...

/* 20. Escriba una consulta sql que retorne un ranking de los mejores 3 empleados del 2012
Se debera retornar legajo, nombre y apellido, anio de ingreso, puntaje 2011, puntaje
2012. El puntaje de cada empleado se calculara de la siguiente manera: para los que
hayan vendido al menos 50 facturas el puntaje se calculara como la cantidad de facturas
que superen los 100 pesos que haya vendido en el año, para los que tengan menos de 50
facturas en el año el calculo del puntaje sera el 50% de cantidad de facturas realizadas
por sus subordinados directos en dicho año */

-- Fix typo -> Aparentemente (MAL MENCIONADO EN EL ENUNCIADO) parece que es el producto + vendido por cliente
select clie_codigo, clie_razon_social, clie_limite_credito, (select top 1 item_producto from Item_Factura 
												group by item_producto
												order by sum(item_cantidad), item_producto)
from cliente JOIN Factura on clie_codigo = fact_cliente
JOIN Item_Factura on fact_tipo+fact_numero+fact_sucursal = item_tipo+item_numero+item_sucursal
where year(fact_fecha) = 2012 -- Si no tiene ventas en 2012 y/o en 2011 sera <= a 2011
group by clie_codigo, clie_razon_social, clie_limite_credito
having sum(item_cantidad) > (select sum(i2.item_cantidad) from Item_Factura i2 
		JOIN factura f2 on f2.fact_tipo+f2.fact_numero+f2.fact_sucursal = i2.item_tipo+i2.item_numero+i2.item_sucursal
			where year(f2.fact_fecha) = 2011 and clie_codigo = f2.fact_cliente
			group by f2.fact_cliente) 
				AND sum(item_precio * item_cantidad) > 1.33*(select sum(i3.item_cantidad * i3.item_precio) 
					from Item_Factura i3
		JOIN factura f3 on f3.fact_tipo+f3.fact_numero+f3.fact_sucursal = i3.item_tipo+i3.item_numero+i3.item_sucursal
			where year(f3.fact_fecha) = 2011 and clie_codigo = f3.fact_cliente
			group by f3.fact_cliente)
order by clie_codigo asc

-- ! 
 
select clie_codigo, (select sum(fact_total) from Factura fx
							where clie_codigo = fx.fact_cliente and year(fact_fecha) = 2012) as TotalComprado,
							-- Al igual que abajo, el group by no tendria sentido si tengo un solo codigo...
					(select sum(ix.item_cantidad) from Item_Factura ix JOIN Factura fz on
						fz.fact_tipo+fz.fact_numero+fz.fact_sucursal = ix.item_tipo+ix.item_numero+ix.item_sucursal
						where year(fz.fact_fecha) = 2012 and clie_codigo = fz.fact_cliente) as CantidadComprada
from Cliente JOIN Factura on fact_cliente = clie_codigo
JOIN item_factura on fact_tipo+fact_numero+fact_sucursal = item_tipo+item_numero+item_sucursal 
group by clie_codigo, year(fact_fecha)
having count(distinct item_producto) > 5 and 
				isnull((select count(distinct i2.item_producto) from Item_Factura i2
						JOIN Factura f2 on f2.fact_tipo+f2.fact_numero+f2.fact_sucursal = i2.item_tipo+i2.item_numero+i2.item_sucursal
						where year(f2.fact_fecha) = year(fact_fecha)+1 and clie_codigo = fact_cliente
						/* group by f2.fact_cliente, year(f2.fact_fecha) */ ),0) > 5
order by 
	CASE 
	   WHEN clie_codigo IN (select ...) THEN 0 -- 0 asigna mayor prioridad
	   ELSE 1
	END, clie_codigo

USE GD2015C1
GO

-- ! Parcial 15/11/2022

SELECT f.fact_cliente, (select top 1 i2.item_producto from Item_Factura i2 JOIN Factura f2 ON f2.fact_tipo+f2.fact_numero+f2.fact_sucursal = i2.item_tipo+i2.item_numero+i2.item_sucursal
			where year(f2.fact_fecha) = 2012 and f.fact_cliente = f2.fact_cliente
			group by I2.item_producto
			order by sum(i2.item_cantidad)),
			-- Aca falta un select super largo para obtener el nombre (?
			count(distinct item_producto), (select count(distinct i3.item_producto) from Item_Factura i3 JOIN Factura f3 ON f3.fact_tipo+f3.fact_numero+f3.fact_sucursal 
				= i3.item_tipo+i3.item_numero+i3.item_sucursal JOIN Composicion c ON c.comp_producto = i3.item_producto
			where year(f3.fact_fecha) = 2012 and f.fact_cliente = f3.fact_cliente
			group by i3.item_producto)
from Factura f JOIN Item_Factura i ON f.fact_tipo+f.fact_numero+f.fact_sucursal = i.item_tipo+i.item_numero+i.item_sucursal
JOIN Producto p on p.prod_codigo = i.item_producto 
where year(f.fact_fecha) = 2012
group by f.fact_cliente
having count(distinct p.prod_rubro) = (select count(distinct rubr_id) from Rubro)
order by (select clie_razon_social from Cliente c
				where f.fact_cliente = c.clie_codigo) , f.fact_cliente -- Aca falta antes de f.fact_cliente otro select para ordenar por clients que compraron entre un 20 y 30% del total facturado

-- ! Parcial 12/11/2022

SELECT f.fact_cliente, (select clie_razon_social from Cliente c
								where f.fact_cliente = c.clie_codigo), 
						(select top 1 i2.item_producto from Item_Factura i2 JOIN Factura f2 ON f2.fact_tipo+f2.fact_numero+f2.fact_sucursal = i2.item_tipo+i2.item_numero+i2.item_sucursal
								where year(f2.fact_fecha) = 2012 and f.fact_cliente = f2.fact_cliente
								group by I2.item_producto
								order by sum(i2.item_cantidad) desc), 
						-- Aca va el select del detalle del producto anterior que me da paja escribir...
						count(distinct item_producto), 
						(select sum(i3.item_cantidad) from Item_Factura i3 JOIN Factura f3 ON f3.fact_tipo+f3.fact_numero+f3.fact_sucursal 
									= i3.item_tipo+i3.item_numero+i3.item_sucursal JOIN Composicion c ON c.comp_producto = i3.item_producto
								where year(f3.fact_fecha) = 2012 and f.fact_cliente = f3.fact_cliente) -- Se podria hacer sin el JOIN con composicion...
FROM Factura f JOIN Item_Factura i ON f.fact_tipo+f.fact_numero+f.fact_sucursal = i.item_tipo+i.item_numero+i.item_sucursal
where year(f.fact_fecha) = 2012
group by f.fact_cliente
having sum(item_Cantidad * item_precio) > (select avg(fact_total) from Factura 
								where year(fact_fecha) = 2012)
order by (select 1 from Item_Factura i4 JOIN Factura f4 ON f4.fact_tipo+f4.fact_numero+f4.fact_sucursal = i4.item_tipo+i4.item_numero+i4.item_sucursal
			where year(f4.fact_fecha) = 2012 and f.fact_cliente = f4.fact_cliente
			having count(distinct i4.item_producto) between 5 and 10)

-- Otra mejor opcion para el order by usando CASE
ORDER BY 
    CASE 
        WHEN COUNT distinct i.item_producto BETWEEN 5 AND 10 
        THEN 1 
        ELSE 0 
    END DESC;

-- ! RECUPERATORIO 4/7/2023

SELECT rtrim(p.prod_codigo) + '-' + rtrim(p.prod_detalle), -- Uso de RTRIM, no me acuerdo como era 
		(select top 1 empl_nombre from Item_Factura i JOIN Factura f ON f.fact_tipo+f.fact_numero+f.fact_sucursal = i.item_tipo+i.item_numero+i.item_sucursal
				JOIN Empleado e ON e.empl_codigo = fact_vendedor
							where i.item_producto = p.prod_codigo
							group by fact_vendedor
							order by sum(i.item_cantidad)),
		(select count(distinct stoc_deposito) from STOCK 
				where stoc_producto = p.prod_codigo and stoc_cantidad > 0),
		(select top 1 f2.fact_cliente from Item_Factura i3 JOIN Factura f2 ON f2.fact_tipo+f2.fact_numero+f2.fact_sucursal = i3.item_tipo+i3.item_numero+i3.item_sucursal
				where i3.item_producto = p.prod_codigo
				group by f2.fact_cliente
				order by sum(i3.item_cantidad)),
		(select top 1 sum(i4.Item_cantidad * i4.item_precio) from Item_Factura i4 JOIN Factura f3 ON f3.fact_tipo+f3.fact_numero+f3.fact_sucursal = i4.item_tipo+i4.item_numero+i4.item_sucursal
				where i4.item_producto = p.prod_codigo
				group by f3.fact_cliente
				order by sum(i4.item_cantidad))
FROM Producto p 
where p.prod_codigo IN (SELECT top 5 i1.item_producto FROM Item_Factura i1 
							group by i1.item_producto
							order by sum(i1.item_cantidad * i1.item_precio) DESC)
	OR p.prod_codigo IN (SELECT top 10 i2.item_producto FROM Item_Factura i2
							group by i2.item_producto
							order by sum(i2.item_cantidad * i2.item_precio) ASC)

-- El order by se puede hacer nuevamente con un SELECT / CASE o bien JOINEAR con Item_factura

-- ! PARCIAL 4/7/2023

SELECT zona_detalle, count(distinct depo_detalle), 
					(select count(distinct stoc_producto) from DEPOSITO d JOIN STOCK s on s.stoc_deposito = d.depo_codigo 
					where zona_detalle = d.depo_zona 
							and stoc_producto IN (select comp_producto from Composicion) -- ojo aca, no hace falta JOINEAR con nadie!
					group by d.depo_zona),
					(select top 1 item_producto from Item_Factura i JOIN Factura f ON f.fact_tipo+f.fact_numero+f.fact_sucursal = i.item_tipo+i.item_numero+i.item_sucursal
							JOIN STOCK s on s.stoc_producto = i.item_producto -- creo que nisiquiera hace falta JOINEAR, y si fuera necesario el JOIN podria estar en una sub-query
							where year(f.fact_fecha) = 2012 and stoc_cantidad > 0 
								and stoc_deposito IN (select depo_codigo from DEPOSITO where depo_zona = zona_codigo)
								group by item_producto
							order by sum(i.item_cantidad)),
					(select top 1 depo_encargado From DEPOSITO JOIN Factura on fact_vendedor = depo_encargado
							where depo_zona = zona_codigo
							group by depo_encargado
							order by sum(fact_total) desc)
from Zona JOIN DEPOSITO ON depo_zona = zona_codigo
group by zona_detalle, zona_codigo
having count(distinct depo_detalle) >= 3

-- VER LO DEL ORDER BY
