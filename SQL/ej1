Use GD2015C1

/* 8. Mostrar para el o los artículos que tengan stock en todos los depósitos, nombre del
artículo, stock del depósito que más stock tiene. */

SELECT prod_detalle, max(stoc_deposito) from STOCK JOIN Producto on prod_codigo = stoc_producto
where stoc_cantidad > 0
group by stoc_producto 
having count(distinct stoc_deposito) >= (Select count(*) from DEPOSITO)


/* 9. Mostrar el código del jefe, código del empleado que lo tiene como jefe, nombre del
mismo y la cantidad de depósitos que ambos tienen asignados. */

Select empl_codigo, empl_nombre, empl_jefe, (Select isnull(count(depo_encargado),0) as cant_depo1 from DEPOSITO 
												where depo_encargado = empl_codigo
												group by depo_encargado), (Select isnull(count(depo_encargado),0) from DEPOSITO 
												where depo_encargado = empl_jefe
												group by depo_encargado)
from Empleado
where empl_jefe is not null -- Asi no me trae al final boss (el jefe de jefes,a ese no lo quiero)

-- Joineando 

select ep.empl_codigo, ep.empl_nombre, ep.empl_jefe, count(distinct d1.depo_codigo), count(distinct d2.depo_codigo)
from empleado ep
LEFT JOIN DEPOSITO d1 on ep.empl_codigo = d1.depo_encargado
JOIN DEPOSITO d2 on ep.empl_jefe = d2.depo_encargado
group by ep.empl_codigo, ep.empl_nombre, ep.empl_jefe

/* 10. Mostrar los 10 productos más vendidos en la historia y también los 10 productos menos
vendidos en la historia. Además mostrar de esos productos, quien fue el cliente que
mayor compra realizo. */

Select distinct m.item_producto, (select top 1 fact_cliente from Item_Factura f
	JOIN factura on fact_tipo+fact_sucursal+fact_numero = item_tipo+item_sucursal+item_numero
				where m.item_producto = f.item_producto
				group by fact_cliente
				order by sum(item_cantidad) desc) from Item_Factura m
where item_producto IN ((select top 10 item_producto from Item_Factura
								group by item_producto
								order by sum(item_cantidad) desc)) 
   OR item_producto IN (select top 10 item_producto from Item_Factura
								group by item_producto
								order by sum(item_cantidad) asc)
							
/* 11. Realizar una consulta que retorne el detalle de la familia, la cantidad diferentes de
productos vendidos y el monto de dichas ventas sin impuestos. Los datos se deberán
ordenar de mayor a menor, por la familia que más productos diferentes vendidos tenga,
solo se deberán mostrar las familias que tengan una venta superior a 20000 pesos para
el año 2012.*/

select fami_detalle, count(distinct item_producto) as ProductosDistintos, sum(item_cantidad * item_precio) as VentasXFamilia from familia 
join producto on prod_familia = fami_id 
join item_factura on prod_codigo = item_producto
where fami_id IN (select prod_familia from Producto join Item_Factura on prod_codigo = item_producto
							join Factura on fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
								where year(fact_fecha) = 2012
								group by prod_familia
								having sum(item_cantidad*item_precio) > 20000)
group by fami_detalle
order by count(distinct item_producto)

/* 12. Mostrar nombre de producto, cantidad de clientes distintos que lo compraron importe
promedio pagado por el producto, cantidad de depósitos en los cuales hay stock del
producto y stock actual del producto en todos los depósitos. Se deberán mostrar
aquellos productos que hayan tenido operaciones en el año 2012 y los datos deberán
ordenarse de mayor a menor por monto vendido del producto. */

select prod_codigo, prod_detalle, count(distinct fact_cliente), avg(item_precio), (select count(stoc_deposito) from STOCK 
															where prod_codigo = stoc_producto
															and stoc_cantidad > 0), (select sum(stoc_cantidad) from STOCK
																		where stoc_producto = prod_codigo)
from Producto 
JOIN Item_Factura on prod_codigo = item_producto 
JOIN factura on fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
where prod_codigo IN (select distinct item_producto from item_Factura 
			JOIN factura on fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
							where year(fact_fecha) = 2012)	
group by prod_codigo, prod_detalle
order by sum(item_cantidad * item_precio) desc

select * from STOCK where stoc_producto = '00009660'

/* 13. Realizar una consulta que retorne para cada producto que posea composición nombre
del producto, precio del producto, precio de la sumatoria de los precios por la cantidad
de los productos que lo componen. Solo se deberán mostrar los productos que estén
compuestos por más de 2 productos y deben ser ordenados de mayor a menor por
cantidad de productos que lo componen. */

select p1.prod_codigo, p1.prod_precio, sum(comp_cantidad * p2.prod_precio) as SumaCantidadXProducto from Producto p1 
JOIN Composicion on prod_codigo = comp_producto
JOIN Producto p2 on p2.prod_codigo = comp_componente
group by p1.prod_codigo, p1.prod_precio
having count(p1.prod_codigo) = 2 -- > 2
order by count(p1.prod_codigo) desc

-- !
select * from Producto p1 
JOIN Composicion on prod_codigo = comp_producto
JOIN Producto p2 on p2.prod_codigo = comp_componente

/* 16. Con el fin de lanzar una nueva campaña comercial para los clientes que menos compran
en la empresa, se pide una consulta SQL que retorne aquellos clientes cuyas ventas son
inferiores a 1/3 del promedio de ventas del producto que más se vendió en el 2012.
Además mostrar
1. Nombre del Cliente
2. Cantidad de unidades totales vendidas en el 2012 para ese cliente.
3. Código de producto que mayor venta tuvo en el 2012 (en caso de existir más de 1,
mostrar solamente el de menor código) para ese cliente. */

-- Bueno, yo creo que asi esta bien, pero viendo otras soluciones se puede directamente JOINEAR directo con el main para
-- la segunda query (la de la cantidad totales de unidades vendidas) y agregar el where de la fecha mas abajo, 
-- no se cambiaria, pero son 2 opciones distintas, la mia creo que esta mal..

select f1.fact_cliente, (select sum(i2.item_cantidad) from Item_Factura i2 JOIN Factura f2 on
			f2.fact_tipo+f2.fact_numero+f2.fact_sucursal=i2.item_tipo+i2.item_numero+i2.item_sucursal
			where f2.fact_cliente = f1.fact_cliente and year(fact_fecha) = 2012 
			group by f2.fact_cliente), 
									(select top 1 i3.item_producto from Item_Factura i3 JOIN Factura f3
									on f3.fact_tipo+f3.fact_numero+f3.fact_sucursal=i3.item_tipo+i3.item_numero+i3.item_sucursal
									where f1.fact_cliente = f3.fact_cliente
									group by i3.item_producto 
									order by sum(item_cantidad*item_precio))
from Factura f1
group by f1.fact_cliente
having sum(f1.fact_total-f1.fact_total_impuestos) < 0.33*(select top 1 avg(item_precio * item_cantidad) from Item_Factura
	JOIN factura on fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
								where year(fact_fecha) = 2012
								group by item_producto
								order by sum(item_cantidad) desc)


select fact_cliente, fact_total, sum(item_cantidad*item_precio) from factura join Item_Factura on 
fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
group by fact_cliente, fact_total

select * from Factura join item_factura on
fact_tipo+fact_numero+fact_sucursal=item_tipo+item_numero+item_sucursal
where fact_cliente = '01541' 
